{***********************************************
Release Velocity Example
Author: Native Instruments
Written by: Yaron Eshkar
Modified: May 30, 2020
*************************************************}

on init
	message("")

	{A variable for indexing}
	declare $i

	{A switch for turning the velocity sensing on and off}
	declare ui_switch $fixedRelVel

	{A constant for the number of MIDI channels}
	declare const $NUM_CHANNELS := 16

	{An array for storing the MIDI channel label GUI IDs}
	declare %midiChans[$NUM_CHANNELS]

	{Declare a label to display release velocities for each MIDI channel separately in order to display release velocity information in a MPE context}
	declare ui_label $midiChan1 (1,1)
	declare ui_label $midiChan2 (1,1)
	declare ui_label $midiChan3 (1,1)
	declare ui_label $midiChan4 (1,1)
	declare ui_label $midiChan5 (1,1)
	declare ui_label $midiChan6 (1,1)
	declare ui_label $midiChan7 (1,1)
	declare ui_label $midiChan8 (1,1)
	declare ui_label $midiChan9 (1,1)
	declare ui_label $midiChan10 (1,1)
	declare ui_label $midiChan11 (1,1)
	declare ui_label $midiChan12 (1,1)
	declare ui_label $midiChan13 (1,1)
	declare ui_label $midiChan14 (1,1)
	declare ui_label $midiChan15 (1,1)
	declare ui_label $midiChan16 (1,1)

	{Put the GU IDs in the array}
	$i := 0
	while ($i < $NUM_CHANNELS)
		{Tip - we can use "+ $i" here because the labels were declared in succession}
		%midiChans[$i] := get_ui_id($midiChan1) + $i
		inc($i)
	end while
end on

{It makes the most sense to use the constant when there is a live event, as shown here in the on release callback}
on release
	{If the switch is on, override any release velocity information and set the constant to 127}
	if ($fixedRelVel=1)
		set_event_par($EVENT_ID, $EVENT_PAR_REL_VELOCITY, 127)
	end if 
	{The actual release velocity values coming in, sent to the appropriate label depending on the incoming MIDI channel}
    set_control_par_str(%midiChans[$MIDI_CHANNEL],$CONTROL_PAR_TEXT,get_event_par($EVENT_ID, $EVENT_PAR_REL_VELOCITY))
end on

