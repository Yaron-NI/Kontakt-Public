{***********************************************
Vector synthesis (+ non-linear pan or dry/wet examples)
Author: Native Instruments
Written by: Yaron Eshkar
Modified: January 15, 2020
*************************************************}

on init

	set_ui_height(6) { Set the UI Height }
	make_perfview { Make the performance view }

	declare ~valA { Corner A float }
	declare ~valB { Corner B float }
	declare ~valC { Corner C float }
	declare ~valD { Corner D float }
	declare ~sum { Sum float }

	declare const $sliderOffsetX := 400 { X position for sliders }
	declare const $sliderOffsetY := 20 { Y position for sliders }
	declare const $xyOffsetX := 150 { X position for XY pad }
	declare const $xyOffsetY := 20 { Y position for XY pad }
	declare const $xySize := 200 { XY pad size }

	declare ui_xy ?xy[2] { Declare the XY pad }
		set_control_par(get_ui_id(?xy),$CONTROL_PAR_WIDTH,$xySize) { Width }
	  	set_control_par(get_ui_id(?xy),$CONTROL_PAR_HEIGHT,$xySize) { Height }
		set_control_par(get_ui_id(?xy),$CONTROL_PAR_POS_X,$xyOffsetX) { Position X }
	  	set_control_par(get_ui_id(?xy),$CONTROL_PAR_POS_Y,$xyOffsetY) { Position Y }

	declare ui_slider $sliderA (0,1000000) { Slider representing value A }
		move_control_px($sliderA,$sliderOffsetX,$sliderOffsetY)
	declare ui_slider $sliderB (0,1000000) { Slider representing value B }
		move_control_px($sliderB,$sliderOffsetX,$sliderOffsetY*2)
	declare ui_slider $sliderC (0,1000000) { Slider representing value C }
		move_control_px($sliderC,$sliderOffsetX,$sliderOffsetY*3)
	declare ui_slider $sliderD (0,1000000) { Slider representing value D }
		move_control_px($sliderD,$sliderOffsetX,$sliderOffsetY*4)
	declare ui_switch $resetVector { Reset to the middle positon }
		move_control_px($resetVector,$sliderOffsetX,$sliderOffsetY*6)
end on

function vectorCalc { Calculate the vector results }
	~valA := (1.0-?xy[0])*(1.0-(1.0-?xy[1])) { Value A calculation }
	~valB := (1.0-(1.0-?xy[0]))*(1.0-(1.0-?xy[1])) { Value B calculation }
	~valC := (1.0-?xy[0])*(1.0-?xy[1]) { Value C calculation }
	~valD := (1.0-(1.0-?xy[0]))*(1.0-?xy[1]) { Value D calculation }
	~sum := ~valA + ~valB + ~valC + ~valD { Sum for dividing }
	$sliderA := real_to_int(1000000.0*(~valA / ~sum)) { Value A to slider }
	$sliderB := real_to_int(1000000.0*(~valB / ~sum)) { Value B to slider }
	$sliderC := real_to_int(1000000.0*(~valC / ~sum)) { Value C to slider }
	$sliderD := real_to_int(1000000.0*(~valD / ~sum)) { Value D slider }
end function

on ui_control (?xy) { Call the calculation }
	call vectorCalc
end on  

on ui_control ($resetVector) { Reset the XY to the center }
	?xy[0] := 0.5 { X to center }
	?xy[1] := 0.5 { Y to cent }
	call vectorCalc
end on

