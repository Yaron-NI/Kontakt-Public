{***********************************************
Envelope and Filter Shell with Wave Display and XY
Author: Native Instruments
Written by: Yaron Eshkar
Modified: July 26,  2021
*************************************************}

{

In setting up the NKI, make sure the groups have an envelope modulator for the volume parameter (like the default Kontakt group) at the first modulator slot (index 0).

The script scales to whatever number of groups are present in the NKI. 
After adding or removing groups the script needs to be re-applyed and then the source parameter will be updated with the new number of groups.

The graphical assets for the instrument can be easily replaced and will still perfectly fit the layout if the same sizes are used for the assets.
The file for the XY cursor is "cursor.png", the size is 21Ã—20 pixels.
The file for the knobs is  "knob.png", the animation  is 31 vertical frames, each frame is 64*64 pixels for a total of 64*1984 pixels.
The file for the instrument icon is "icon.png", the size is 33x34 pixels.

}

on init
    message("") { Reset the messages }

    declare @instrumentName { Declare the instrument name variable }
    @instrumentName := "O30M Synth" { Set the instrument name string }

    declare ui_label $labelInstrumentName (8, 1) { Label for the full instrument name }
    set_script_title(@instrumentName) { Set the script title }
    set_snapshot_type(1) { Don't init on snapshots }

    if ($NI_KONTAKT_IS_HEADLESS = 0) { Check if running headless, only do GUI stuff if on desktop }
        make_perfview { Make the performance view }
        set_ui_height(8) { Set the height of the UI }
        set_ui_color(000000h) { Background to black }
        set_control_par_str($INST_ICON_ID, $CONTROL_PAR_PICTURE, "icon") { instrument icon }
        set_text($labelInstrumentName,  @instrumentName) { Set the instrument name label }
        set_control_par(get_ui_id($labelInstrumentName), $CONTROL_PAR_TEXT_ALIGNMENT, 1) { Center the text }
        set_control_par(get_ui_id($labelInstrumentName), $CONTROL_PAR_WIDTH, 300) { Make the label wide enough }
        set_control_par(get_ui_id($labelInstrumentName), $CONTROL_PAR_HIDE, $HIDE_PART_BG) { Hide the label backgrounds }
        move_control_px($labelInstrumentName, 175, 300) { Position the label }
    else { If running headless then hide all the controls }
        set_control_par(get_ui_id($labelInstrumentName), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) { Hide the instrument name label }
    end if
    
    declare $i { Loop counter }
    declare $dummyNote { Variable for playing a dummy note to set the waveform display }
    declare $touchedControl { Variable for keeping track of the last touched control }
    declare $groupSelect { Variable for keeping track of the playable group }
    declare const $numMacros := 8 { Number of NKS macros }
    declare const $groupMacros := 5 { Number of Poly Macros }

    { 8 NKS Macros }
    declare ui_slider $macro1 (0, $NUM_GROUPS - 1) { Source select }
    declare ui_slider $macro2 (110000, 900000) { Amp envelope attack, limit to useful ranges }
    declare ui_slider $macro3 (110000, 850000) { Amp envelope decay, limit to useful ranges }
    declare ui_slider $macro4 (0, 1000000) { Amp envelope sustain }
    declare ui_slider $macro5 (110000, 850000) { Amp envelope release, limit to useful ranges }
    declare ui_slider $macro6 (0, 1000000) { Filter cutoff }
    declare ui_slider $macro7 (0, 1000000) { Filter resonanace }
    declare ui_slider $macro8 (500000, 1000000) { Saturation amount, halfway equals no saturation so we init to that }

    { Make all macros persistent }
    make_persistent($macro1) { Source }
    make_persistent($macro2) { Attack }
    make_persistent($macro3) { Decay }
    make_persistent($macro4) { Sustain }
    make_persistent($macro5) { Release }
    make_persistent($macro6) { Cutoff }
    make_persistent($macro7) { Resonance }
    make_persistent($macro8) { Saturation }

    { Labels for each macro }
    declare ui_label $label1(1, 1) { Source }
    declare ui_label $label2(1, 1) { Attack }
    declare ui_label $label3(1, 1) { Decay }
    declare ui_label $label4(1, 1) { Sustain }
    declare ui_label $label5(1, 1) { Release }
    declare ui_label $label6(1, 1) { Cutoff }
    declare ui_label $label7(1, 1) { Resonance }
    declare ui_label $label8(1, 1) { Saturation }

    declare !macroText[$numMacros] { Macro Texts }
    declare !valueType[$numMacros] { Value Types }
    declare !helpText[$numMacros]  { Help Texts }
    declare %enginePar[$numMacros] := (-1, $ENGINE_PAR_ATTACK, $ENGINE_PAR_DECAY, $ENGINE_PAR_SUSTAIN, $ENGINE_PAR_RELEASE, ...
                                            $ENGINE_PAR_CUTOFF, $ENGINE_PAR_RESONANCE, $ENGINE_PAR_SHAPE) { Engine parameters }
    declare %groupSlot[$numMacros] := (-1) { Group slot }
    declare %fxSlot[$numMacros] := (0, 0, 0, 0, 0, 0, 0, 1) { FX slot }
    declare %genericSlot[$numMacros] := (-1, -1, -1, -1, -1, 1, 1, 1) { Generic slot }

    !macroText[0] := "Source"
    !macroText[1] := "Attack"
    !macroText[2] := "Decay"
    !macroText[3] := "Sustain"
    !macroText[4] := "Release"
    !macroText[5] := "Cutoff"
    !macroText[6] := "Res"
    !macroText[7] := "Saturate"

    !valueType[0] := "" { No value type for source }
    !valueType[1] := " ms" { Attack in ms }
    !valueType[2] := " ms" { Decay in ms }
    !valueType[3] := " dB" { Sustain in dB }
    !valueType[4] := " ms" { Release in ms }
    !valueType[5] := " Hz" { Cutoff in Hz }
    !valueType[6] := " %" { Resonance in % }
    !valueType[7] := " %" { Saturation in % }

    !helpText[0] := "Selects the playable source group"
    !helpText[1] := "Amplitude envelope attack time"
    !helpText[2] := "Amplitude envelope decay time"
    !helpText[3] := "Amplitude envelope sustain level"
    !helpText[4] := "Amplitude envelope release time"
    !helpText[5] := "Sets the cutoff point of the lowpass filter"
    !helpText[6] := "Sets the resonance amount of the lowpass filter"
    !helpText[7] := "Amount of saturation applied to the signal"

    declare %macroID[$numMacros] { Array for the control GUI IDs }
    declare %labelID[$numMacros] { Array for the label GUI IDs }

    declare ui_waveform $waveformDisplay (1, 1) { Declare the waveform display }
    declare ui_xy ?xyPad[2] { Declare the XY pad }
    declare $waveformID := get_ui_id($waveformDisplay) { Get the waveform display ID }
    declare $xyID := get_ui_id(?xyPad) { Get the XY pad ID }

    declare const $guiOffsetX   := 150 { GUI main offset x }
    declare const $guiOffsetY   := 10  { GUI main offset y }
    declare const $guiSpacingX  := 100 { GUI element spacing x }
    declare const $guiSpacingY  := 40  { GUI element spacing y }
    declare const $labelOffsetY := 20  { Label spacing offset }
    declare const $displaySize  := 185 { Size for the waveform display and XY squares }

    $i := 0 { Set the control parameters }
    while($i < $numMacros) { Run the loop for the mumber of macros }
        %macroID[$i] := get_ui_id($macro1) + $i { Put the controls in the GUI ID array }
        %labelID[$i] := get_ui_id($label1) + $i { Put the labels in the GUI ID array }

        set_control_par(%macroID[$i], $CONTROL_PAR_AUTOMATION_ID, $i) { Set the automation IDs }
        set_control_par_str(%macroID[$i], $CONTROL_PAR_AUTOMATION_NAME, !macroText[$i]) { Set the automation names }
        set_control_par_str(%macroID[$i], $CONTROL_PAR_HELP, !helpText[$i]) { Set the help texts }
        set_control_par_str(%macroID[$i], $CONTROL_PAR_PICTURE, "knob") { Set the picture }
        set_control_par(%macroID[$i], $CONTROL_PAR_MOUSE_BEHAVIOUR, -2000) { Set the automation IDs }
        set_control_par(%labelID[$i], $CONTROL_PAR_HIDE, $HIDE_PART_BG) { Hide the label backgrounds }

        if ($NI_KONTAKT_IS_HEADLESS = 0) { Check if running on headless }
            select ($i)
                case 0 { Position source select macro }
                    set_control_par(%macroID[$i], $CONTROL_PAR_POS_X, $guiOffsetX / 3) { Control X }
                    set_control_par(%macroID[$i], $CONTROL_PAR_POS_Y, $guiOffsetY) { Control Y }
                    set_control_par(%labelID[$i], $CONTROL_PAR_POS_X, $guiOffsetX / 3) { Label X }
                    set_control_par(%labelID[$i], $CONTROL_PAR_POS_Y, $guiOffsetY + $guiSpacingY + $labelOffsetY) { Label Y }

                    { Use this single case to also position the waveform display and XY pad }
                    set_control_par($waveformID, $CONTROL_PAR_BG_COLOR, 0000000h) { Prepare and position the waveform display }
                    set_control_par($waveformID, $CONTROL_PAR_HEIGHT, $displaySize) { Set the height of the waveform display }
                    set_control_par($waveformID, $CONTROL_PAR_WIDTH, $displaySize) { Set the width of the waveform display}
                    set_control_par($waveformID, $CONTROL_PAR_POS_X, $guiOffsetX) { Position the waveform display X }
                    set_control_par($waveformID, $CONTROL_PAR_POS_Y, ($guiOffsetY * 8) + $labelOffsetY) { Position the waveform display Y }

                    set_control_par_str($xyID, $CONTROL_PAR_CURSOR_PICTURE, "cursor") { Prepare and position the XY pad }
                    set_control_par($xyID, $CONTROL_PAR_MOUSE_MODE, 2) { Set the XY pad to capture clicks anywhere and not just on the cursor }
                    set_control_par($xyID, $CONTROL_PAR_HEIGHT, $displaySize) { Set the high of the XY pad }
                    set_control_par($xyID, $CONTROL_PAR_WIDTH, $displaySize) {Set the wifth of the XY pad }
                    set_control_par($xyID, $CONTROL_PAR_POS_X, $guiOffsetX + 200) { Position the XY pad X }
                    set_control_par($xyID, $CONTROL_PAR_POS_Y, ($guiOffsetY * 8) + $labelOffsetY) { Position the XY pad Y }
                case 1 to 4 { Position ADSR macros }
                    set_control_par(%macroID[$i], $CONTROL_PAR_POS_X, $guiOffsetX + (($i - 1) * $guiSpacingX)) { Control X }
                    set_control_par(%macroID[$i], $CONTROL_PAR_POS_Y, $guiOffsetY) { Control Y }
                    set_control_par(%labelID[$i], $CONTROL_PAR_POS_X, $guiOffsetX + (($i - 1) * $guiSpacingX)) { Label X }
                    set_control_par(%labelID[$i], $CONTROL_PAR_POS_Y, $guiOffsetY + $guiSpacingY + $labelOffsetY) { Label Y }
                case 5 to 7 { Position cut, res and saturate macros }
                    set_control_par(%macroID[$i], $CONTROL_PAR_POS_X, $guiOffsetX / 3) { Control X }
                    set_control_par(%macroID[$i], $CONTROL_PAR_POS_Y, $guiOffsetY + $guiSpacingY * ((2 * $i) - 8)) { Control Y }
                    set_control_par(%labelID[$i], $CONTROL_PAR_POS_X, $guiOffsetX / 3) { Label X }
                    set_control_par(%labelID[$i], $CONTROL_PAR_POS_Y, $guiOffsetY + ($guiSpacingY * ((2 * $i) - 7) + $labelOffsetY)) { Label Y }
             end select
        else { Hide all the controls }
            set_control_par(%macroID[$i], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) { Macros }
            set_control_par(%labelID[$i], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) { Labels }
            set_control_par($waveformID, $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) { Waveform display }
            set_control_par($xyID, $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) { XY Pad }
        end if

        inc($i)
    end while

    set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_FILTER, -1, 0, 1) { Place a filter in the first insert slot }
    set_engine_par($ENGINE_PAR_EFFECT_SUBTYPE, $FILTER_TYPE_SV_LP4, -1, 0, 1) { Set the filter to 4-pole SV lowpass }
    set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_SHAPER, -1, 1, 1) { Place a saturator in the second insert slot }
    set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_LIMITER, -1, 7, 2) { Place a limiter on the last main effect slot }
    
    set_control_par(%macroID[3], $CONTROL_PAR_DEFAULT_VALUE, 1000000) { Sustain default value }
    set_control_par(%macroID[3], $CONTROL_PAR_VALUE, 1000000) { Sustain init to default value }
    set_control_par(%macroID[5], $CONTROL_PAR_DEFAULT_VALUE, 1000000) { Filter cutoff default value }
    set_control_par(%macroID[5], $CONTROL_PAR_VALUE, 1000000) { Filter cutoff init to default value }
end on

function setMacro { Set the macros }
    if ($touchedControl < $groupMacros) { Check if a touched control is on group or instrument level }
        %groupSlot[$touchedControl] := $groupSelect { If the control is on a group level,  set the group slot }
    end if

    { Set the engine parameter }
    set_engine_par(%enginePar[$touchedControl], ...
                   get_control_par(%macroID[$touchedControl],  $CONTROL_PAR_VALUE), ...
                   %groupSlot[$touchedControl], ...
                   %fxSlot[$touchedControl], ...
                   %genericSlot[$touchedControl])

    { Update the internal slider label for host automation }
    set_control_par_str(%macroID[$touchedControl], $CONTROL_PAR_LABEL, ...
                        get_engine_par_disp(%enginePar[$touchedControl], ...
                                            %groupSlot[$touchedControl], ...
                                            %fxSlot[$touchedControl], ...
                                            %genericSlot[$touchedControl]) & !valueType[$touchedControl]) 

    { Update the GUI label }
    if ($NI_KONTAKT_IS_HEADLESS = 0)
        set_control_par_str(%labelID[$touchedControl], $CONTROL_PAR_TEXT, ...
                            !macroText[$touchedControl] & ": " & ...
                            get_engine_par_disp(%enginePar[$touchedControl], ...
                                                %groupSlot[$touchedControl], ...
                                                %fxSlot[$touchedControl], ...
                                                %genericSlot[$touchedControl]) & !valueType[$touchedControl])
    end if
end function

function setWaveformDisplay { Update the waveform display with a wave from the selected group }
    $dummyNote := play_note(48, 127, 0, 10) { We have to play a dummy note to get the zone ID }
    change_vol($dummyNote, -200000, 0) { We don't want to hear this note }
    set_event_par_arr($dummyNote,$EVENT_PAR_ALLOW_GROUP, 0, $ALL_GROUPS) { Disallow all groups }
    set_event_par_arr($dummyNote,$EVENT_PAR_ALLOW_GROUP, 1, $groupSelect) { Play the note in the selected group }
    wait(1) { Wait for the note to exist to attach it }
    attach_zone($waveformDisplay, get_event_par($dummyNote, $EVENT_PAR_ZONE_ID), 0) { Attach the last played zone to the Waveform view }
end function

function setGroupSelect { Set the selected group }
    $groupSelect := $macro1 { Selected group set by first macro }

    set_control_par_str(%macroID[$touchedControl], $CONTROL_PAR_LABEL, $groupSelect + 1) { Update the internal slider label for host automation }

    if ($NI_KONTAKT_IS_HEADLESS = 0) { Update the GUI label }
        set_control_par_str(%labelID[$touchedControl], $CONTROL_PAR_TEXT, !macroText[0] & ": " & $groupSelect + 1)
    end if

    $i := 1  { Set the macro values for the selected group }
    while ($i < $numMacros) { Loop to set all macros }
        $touchedControl := $i
        call setMacro

        inc($i)
    end while

    call setWaveformDisplay { Call the function to set the waveform display }
end function

on persistence_changed { executed after the init callback or whenever a snapshot has been loaded }
    call setGroupSelect { Set the source group and update all parameters }

    ?xyPad[0] := int_to_real($macro6) / 1000000.0 { Update XY pad X position }
    ?xyPad[1] := int_to_real($macro7) / 1000000.0 { Update XY pad Y position }
end on

on note { Note logic }
    disallow_group($ALL_GROUPS) { First disallow all groups }
    allow_group($groupSelect) { Play only the selected group }
end on

on ui_control (?xyPad) { XY Pad }
    $macro6 := real_to_int(?xyPad[0] * 1000000.0) { Set the filter cutoff to X value }
    $touchedControl := 5
    call setMacro

    $macro7 := real_to_int(?xyPad[1] * 1000000.0) { Set the filter resonanace to Y value }
    $touchedControl := 6
    call setMacro
end on

on ui_control ($macro1) { Group Select }
    $touchedControl := 0
    call setGroupSelect { In this case call the group select function and not the macro function }
end on

on ui_control ($macro2) { Amp Attack }
    $touchedControl := 1
    call setMacro
end on

on ui_control ($macro3) { Amp Decay }
    $touchedControl := 2
    call setMacro
end on

on ui_control ($macro4) { Amp Sustain }
    $touchedControl := 3
    call setMacro
end on

on ui_control ($macro5) { Amp Release }
    $touchedControl := 4
    call setMacro
end on

on ui_control ($macro6) { Filter Cut }
    ?xyPad[0] := int_to_real($macro6) / 1000000.0 { Set the XY Pad X }
    $touchedControl := 5
    call setMacro
end on

on ui_control ($macro7) { Filter Res }
    ?xyPad[1] := int_to_real($macro7) / 1000000.0 { Set the XY Pad Y }
    $touchedControl := 6
    call setMacro
end on

on ui_control ($macro8) { Saturation Amount }
    $touchedControl := 7
    call setMacro
end on
