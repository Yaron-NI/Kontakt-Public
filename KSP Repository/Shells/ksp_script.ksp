{***********************************************
Simplest Performant NKS Shell
Author: Native Instruments
Written by: Yaron Eshkar
Modified: October 27, 2020
*************************************************}

on init

    {Set the instrument name}
    declare @instrumentFramework
    declare @instrumentTitle
    declare @instrumentName
    @instrumentFramework := "Test Instrument"
    @instrumentTitle := "Instrument"
    @instrumentName := @instrumentFramework & " " & @instrumentTitle

    {Check if running on desktop or headless}
    declare const $mPlus := $NI_KONTAKT_IS_HEADLESS

    {Set the framework sub-type}
    {
    0=Sustaining with 8 knobs - Source, A, D, S, R, Cut, Res, Saturate
    1=Stab with 8 knobs - Source, A, H, D, Env, Cut, Res, Saturate
    2-Wavetable with 8 knobs - Source, A, D, S, R, WT Pos, Cut, Res
    3=Minimal with 3 knobs - Source, H, D
    4-Bare with 1 knob - Source
    }
    declare const $frameworkType := 0

    {Set the sscript title}
    set_script_title(@instrumentFramework)

    {Reset the messages}
    message("")

    {Don't init on snapshots}
    set_snapshot_type(1)

    {Label for the full instrument name}
    declare ui_label $labelInstrumentName(8,1)

    {Check if headless}
    if($mPlus=0)
        {Make the performance view}
        if ($frameworkType<3)
            set_ui_height(3)
        else
            set_ui_height(2)
        end if
        make_perfview
        set_ui_color(000000h)
        {Set the instrument name label parameters}
        set_text($labelInstrumentName, @instrumentName)
        set_control_par(get_ui_id($labelInstrumentName),$CONTROL_PAR_WIDTH,300)
        set_control_par(get_ui_id($labelInstrumentName),$CONTROL_PAR_TEXT_ALIGNMENT,1)
        move_control_px($labelInstrumentName,175,10)
    else
        {Hide the instrument name label}
        set_control_par(get_ui_id($labelInstrumentName),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)        
    end if

    {Variable for looping}
    declare $i

    {Variable for setting the scaled macro value}
    declare $value

    {Variable for keeping track of the last touched control}
    declare $touchedControl

    {Variable for keeping track of the playable group}
    declare $groupSelect

    {Number of NKS macros}
    declare const $numMacros := 8

    {Number of Poly Macros}
    declare $polyMacros
    
    {8 NKS Macros}
    declare ui_slider $macro1(0,$NUM_GROUPS-1)
    declare ui_slider $macro2(0,1000)
    declare ui_slider $macro3(0,1000)
    declare ui_slider $macro4(0,1000)
    declare ui_slider $macro5(0,1000)
    declare ui_slider $macro6(0,1000)
    declare ui_slider $macro7(0,1000)
    declare ui_slider $macro8(0,1000)    

    {Labels for each macro}
    declare ui_label $label1(1,1)
    declare ui_label $label2(1,1)
    declare ui_label $label3(1,1)
    declare ui_label $label4(1,1)
    declare ui_label $label5(1,1)
    declare ui_label $label6(1,1)
    declare ui_label $label7(1,1)
    declare ui_label $label8(1,1)

    {GUI main offsets}
    declare $guiOffsetX := 125
    declare $guiOffsetY := 30
    {GUI element spacing}
    declare $guiSpacingX := 100
    declare $guiSpacingY := 20

    {Make all macros persistent}
    make_persistent($macro1)
    make_persistent($macro2)
    make_persistent($macro3)
    make_persistent($macro4)
    make_persistent($macro5)
    make_persistent($macro6)
    make_persistent($macro7)
    make_persistent($macro8)

    {Macro Arrays}
    {Macro Texts}
    declare !macroText[$numMacros]
    {Value Types}
    declare !valueType[$numMacros]
    {Array for the engine parameters}
    declare %enginerPar[$numMacros]
    {Group slot array}
    declare %groupSlot[$numMacros]
    {FX slot array}        
    declare %fxSlot[$numMacros]
    {Generic slot array}
    declare %genericSlot[$numMacros]
    {Minimum scaled macro value}
    declare %macroMin[$numMacros]
    {Maximum scaled macro value}
    declare %macroMax[$numMacros]

    {Let the script known which macros to hide}
    declare $unusedMacros := 0

    {Populate the arrays according to the framework sub-type}
    select($frameworkType)
        case 0
            !macroText[0] := "Source"
            !macroText[1] := "Attack"
            !macroText[2] := "Decay"
            !macroText[3] := "Sustain"
            !macroText[4] := "Release"     
            !macroText[5] := "Cutoff"
            !macroText[6] := "Res"
            !macroText[7] := "Saturate"

            !valueType[0] := ""
            !valueType[1] := " ms"
            !valueType[2] := " ms"
            !valueType[3] := " dB"
            !valueType[4] := " ms"
            !valueType[5] := " Hz"
            !valueType[6] := " %"
            !valueType[7] := " %"

            %enginerPar[0] := -1                        {Group select, so unused}
            %enginerPar[1] := $ENGINE_PAR_ATTACK        {Amp attack}
            %enginerPar[2] := $ENGINE_PAR_DECAY         {Amp decay}
            %enginerPar[3] := $ENGINE_PAR_SUSTAIN       {Amp sustain}
            %enginerPar[4] := $ENGINE_PAR_RELEASE       {Amp release}
            %enginerPar[5] := $ENGINE_PAR_CUTOFF        {Filter cut}
            %enginerPar[6] := $ENGINE_PAR_RESONANCE     {Filter res}
            %enginerPar[7] := $ENGINE_PAR_SHAPE         {Saturation amount}

            %macroMin[0] := 0
            %macroMin[1] := 0
            %macroMin[2] := 0
            %macroMin[3] := 0
            %macroMin[4] := 0
            %macroMin[5] := 0
            %macroMin[6] := 0
            %macroMin[7] := 500000

            %macroMax[0] := 1000000
            %macroMax[1] := 1000000
            %macroMax[2] := 1000000
            %macroMax[3] := 1000000
            %macroMax[4] := 1000000
            %macroMax[5] := 1000000
            %macroMax[6] := 1000000
            %macroMax[7] := 1000000

            %groupSlot[0] := -1
            %groupSlot[1] := -1
            %groupSlot[2] := -1
            %groupSlot[3] := -1
            %groupSlot[4] := -1
            %groupSlot[5] := -1
            %groupSlot[6] := -1
            %groupSlot[7] := -1

            %fxSlot[0] := 0
            %fxSlot[1] := 0
            %fxSlot[2] := 0
            %fxSlot[3] := 0
            %fxSlot[4] := 0
            %fxSlot[5] := 0
            %fxSlot[6] := 0
            %fxSlot[7] := 1

            %genericSlot[0] := -1
            %genericSlot[1] := -1
            %genericSlot[2] := -1
            %genericSlot[3] := -1
            %genericSlot[4] := -1
            %genericSlot[5] := 1
            %genericSlot[6] := 1
            %genericSlot[7] := 1

            $polyMacros := 5
        case 1
            !macroText[0] := "Source"
            !macroText[1] := "Attack"
            !macroText[2] := "Hold"
            !macroText[3] := "Decay"
            !macroText[4] := "Env"     
            !macroText[5] := "Cutoff"
            !macroText[6] := "Res"
            !macroText[7] := "Saturate"

            !valueType[0] := ""
            !valueType[1] := " ms"
            !valueType[2] := " ms"
            !valueType[3] := " ms"
            !valueType[4] := " %"
            !valueType[5] := " Hz"
            !valueType[6] := " %"
            !valueType[7] := " %"

            %enginerPar[0] := -1
            %enginerPar[1] := $ENGINE_PAR_ATTACK
            %enginerPar[2] := $ENGINE_PAR_HOLD
            %enginerPar[3] := $ENGINE_PAR_DECAY
            %enginerPar[4] := $ENGINE_PAR_MOD_TARGET_INTENSITY
            %enginerPar[5] := $ENGINE_PAR_CUTOFF
            %enginerPar[6] := $ENGINE_PAR_RESONANCE    
            %enginerPar[7] := $ENGINE_PAR_SHAPE

            %macroMin[0] := 0
            %macroMin[1] := 0
            %macroMin[2] := 0
            %macroMin[3] := 0
            %macroMin[4] := 0
            %macroMin[5] := 0
            %macroMin[6] := 0
            %macroMin[7] := 500000

            %macroMax[0] := 1000000
            %macroMax[1] := 1000000
            %macroMax[2] := 1000000
            %macroMax[3] := 1000000
            %macroMax[4] := 1000000
            %macroMax[5] := 1000000
            %macroMax[6] := 1000000
            %macroMax[7] := 1000000

            %groupSlot[0] := -1
            %groupSlot[1] := -1
            %groupSlot[2] := -1
            %groupSlot[3] := -1
            %groupSlot[4] := -1
            %groupSlot[5] := -1
            %groupSlot[6] := -1
            %groupSlot[7] := -1

            %fxSlot[0] := 0
            %fxSlot[1] := 0
            %fxSlot[2] := 0
            %fxSlot[3] := 0
            %fxSlot[4] := 0
            %fxSlot[5] := 0
            %fxSlot[6] := 0
            %fxSlot[7] := 1

            %genericSlot[0] := -1
            %genericSlot[1] := -1
            %genericSlot[2] := -1
            %genericSlot[3] := -1
            %genericSlot[4] := -1
            %genericSlot[5] := 1
            %genericSlot[6] := 1
            %genericSlot[7] := 1

            $polyMacros := 5
        case 2
            !macroText[0] := "Source"
            !macroText[1] := "Attack"
            !macroText[2] := "Decay"
            !macroText[3] := "Sustain"
            !macroText[4] := "Release"     
            !macroText[5] := "WT Pos"
            !macroText[6] := "Cutoff"
            !macroText[7] := "Res"

            !valueType[0] := ""
            !valueType[1] := " ms"
            !valueType[2] := " ms"
            !valueType[3] := " dB"
            !valueType[4] := " ms"
            !valueType[5] := " %"
            !valueType[6] := " Hz"
            !valueType[7] := " %"

            %enginerPar[0] := -1                        {Group select, so unused}
            %enginerPar[1] := $ENGINE_PAR_ATTACK        {Amp attack}
            %enginerPar[2] := $ENGINE_PAR_DECAY         {Amp decay}
            %enginerPar[3] := $ENGINE_PAR_SUSTAIN       {Amp sustain}
            %enginerPar[4] := $ENGINE_PAR_RELEASE       {Amp release}
            %enginerPar[5] := $ENGINE_PAR_WT_POSITION   {WT Position}
            %enginerPar[6] := $ENGINE_PAR_CUTOFF        {Filter cut}
            %enginerPar[7] := $ENGINE_PAR_RESONANCE     {Filter res}

            %macroMin[0] := 0
            %macroMin[1] := 0
            %macroMin[2] := 0
            %macroMin[3] := 0
            %macroMin[4] := 0
            %macroMin[5] := 0
            %macroMin[6] := 0
            %macroMin[7] := 0

            %macroMax[0] := 1000000
            %macroMax[1] := 1000000
            %macroMax[2] := 1000000
            %macroMax[3] := 1000000
            %macroMax[4] := 1000000
            %macroMax[5] := 1000000
            %macroMax[6] := 1000000
            %macroMax[7] := 1000000

            %groupSlot[0] := -1
            %groupSlot[1] := -1
            %groupSlot[2] := -1
            %groupSlot[3] := -1
            %groupSlot[4] := -1
            %groupSlot[5] := -1
            %groupSlot[6] := -1
            %groupSlot[7] := -1

            %fxSlot[0] := 0
            %fxSlot[1] := 0
            %fxSlot[2] := 0
            %fxSlot[3] := 0
            %fxSlot[4] := 0
            %fxSlot[5] := 0
            %fxSlot[6] := 0
            %fxSlot[7] := 0

            %genericSlot[0] := -1
            %genericSlot[1] := -1
            %genericSlot[2] := -1
            %genericSlot[3] := -1
            %genericSlot[4] := -1
            %genericSlot[5] := -1
            %genericSlot[6] := 1
            %genericSlot[7] := 1            

            $polyMacros := 6
        case 3
            !macroText[0] := "Source"
            !macroText[1] := "Hold"
            !macroText[2] := "Decay"

            !valueType[0] := ""
            !valueType[1] := " ms"
            !valueType[2] := " ms"

            %enginerPar[0] := -1
            %enginerPar[1] := $ENGINE_PAR_HOLD
            %enginerPar[2] := $ENGINE_PAR_DECAY

            %macroMin[0] := 0
            %macroMin[1] := 0
            %macroMin[2] := 0

            %macroMax[0] := 1000000
            %macroMax[1] := 1000000
            %macroMax[2] := 1000000

            %groupSlot[0] := -1
            %groupSlot[1] := -1
            %groupSlot[2] := -1

            %fxSlot[0] := 0
            %fxSlot[1] := 0
            %fxSlot[2] := 0

            %genericSlot[0] := -1
            %genericSlot[1] := -1
            %genericSlot[2] := -1

            {This minimal sub-framework uses only 3 macros}
            $unusedMacros := 5

            $polyMacros := 5
        case 4
            !macroText[0] := "Source"
            !valueType[0] := ""
            %enginerPar[0] := -1
            %macroMin[0] := 0
            %macroMax[0] := 1000000
            %groupSlot[0] := -1
            %fxSlot[0] := 0
            %genericSlot[0] := -1

            {This bare sub-framework uses only 1 macro}
            $unusedMacros := 7

            $polyMacros := 5
    end select

    {Arrays for the GUI IDs}
    declare %macroID[$numMacros]
    declare %labelID[$numMacros]

    {Set the control parameters}
    $i := 0
    while($i<$numMacros)
        {Put the controls in the GUI ID array}
        %macroID[$i] := get_ui_id($macro1)+$i
        %labelID[$i] := get_ui_id($label1)+$i
        {Set the automation IDs}
        set_control_par(%macroID[$i],$CONTROL_PAR_AUTOMATION_ID,$i)
        set_control_par_str(%macroID[$i],$CONTROL_PAR_AUTOMATION_NAME,!macroText[$i])
        {Hide all the controls}
        set_control_par(%macroID[$i],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
        set_control_par(%labelID[$i],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
        {Check if running on headless}
        if($mPlus=0)
            if ($i<$numMacros-$unusedMacros)
                {Hide all the controls}
                set_control_par(%macroID[$i],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
                set_control_par(%labelID[$i],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
                if($i<4)
                    {Position the first row of four controls and labels}
                    set_control_par(%macroID[$i],$CONTROL_PAR_POS_X,$guiOffsetX+($i*$guiSpacingX))
                    set_control_par(%macroID[$i],$CONTROL_PAR_POS_Y,$guiOffsetY)
                    set_control_par(%labelID[$i],$CONTROL_PAR_POS_X,$guiOffsetX+($i*$guiSpacingX))
                    set_control_par(%labelID[$i],$CONTROL_PAR_POS_Y,$guiOffsetY+$guiSpacingY)
                else
                    {Position the second row of four controls and labels}
                    set_control_par(%macroID[$i],$CONTROL_PAR_POS_X,$guiOffsetX+(($i-4)*$guiSpacingX))
                    set_control_par(%macroID[$i],$CONTROL_PAR_POS_Y,$guiOffsetY+$guiSpacingY*2)
                    set_control_par(%labelID[$i],$CONTROL_PAR_POS_X,$guiOffsetX+(($i-4)*$guiSpacingX))
                    set_control_par(%labelID[$i],$CONTROL_PAR_POS_Y,$guiOffsetY+$guiSpacingY*3)
                end if
            end if
        end if
        inc($i)
    end while

    {Check if this is the first time the script is running and build the effects according to framework sub-type}
    declare $fresh := 0
    make_persistent($fresh)
    read_persistent_var($fresh)
    if ($fresh=0)
        if($frameworkType<2)
            set_engine_par($ENGINE_PAR_EFFECT_TYPE,$EFFECT_TYPE_SHAPER,-1,1,1) 
            $macro6 := 1000
        end if
        if($frameworkType<3)
            set_engine_par($ENGINE_PAR_EFFECT_TYPE,$EFFECT_TYPE_FILTER,-1,0,1) 
            set_engine_par($ENGINE_PAR_EFFECT_SUBTYPE,$FILTER_TYPE_SV_LP4,-1,0,1) 
            $macro2 := 110
            $macro3 := 110
            $macro4 := 1000
            $macro5 := 110
        end if
        if($frameworkType=2)
            $macro7 := 1000
        end if
        {Limiter in any case}
        set_engine_par($ENGINE_PAR_EFFECT_TYPE,$EFFECT_TYPE_LIMITER,-1,7,2) 
        $fresh := 1
    end if

end on

{Scale the macro value}
function getScaledValue
    $value := %macroMin[$touchedControl]+real_to_int(int_to_real(%macroMax[$touchedControl]-%macroMin[$touchedControl])*(int_to_real(get_control_par(%macroID[$touchedControl],$CONTROL_PAR_VALUE))/int_to_real(1000)))
end function

{Set the macros}
function setMacro
    {Check if a touched control is on group or instrument level}
    if ($touchedControl<$polyMacros)
        %groupSlot[$touchedControl] := $groupSelect
    end if    
    {Scale the macro value}
    call getScaledValue
    {Set the engine parameter}
    set_engine_par(%enginerPar[$touchedControl],$value,%groupSlot[$touchedControl],%fxSlot[$touchedControl],%genericSlot[$touchedControl])
    {Update the internal slider label for host automation}
    set_control_par_str(%macroID[$touchedControl],$CONTROL_PAR_LABEL,get_engine_par_disp(%enginerPar[$touchedControl],%groupSlot[$touchedControl],%fxSlot[$touchedControl],%genericSlot[$touchedControl]) & !valueType[$touchedControl])
    {Update the GUI label}
    if($mPlus=0)
        set_control_par_str(%labelID[$touchedControl],$CONTROL_PAR_TEXT,!macroText[$touchedControl] & ": " & get_engine_par_disp(%enginerPar[$touchedControl],%groupSlot[$touchedControl],%fxSlot[$touchedControl],%genericSlot[$touchedControl]) & !valueType[$touchedControl])
    end if
end function

{Set the selected group}
function setGroupSelect
    $groupSelect := $macro1
    {Update the internal slider label for host automation}
    set_control_par_str(%macroID[$touchedControl],$CONTROL_PAR_LABEL,$groupSelect+1)
    {Update the GUI label}
    if($mPlus=0)
        set_control_par_str(%labelID[$touchedControl],$CONTROL_PAR_TEXT,!macroText[0] & ": " & $groupSelect+1)
    end if
    {Set the macro values for the selected group}
    $i := 1
    while ($i<$numMacros)
        $touchedControl := $i
        call setMacro
        inc($i)
    end while
end function

{executed after the init callback or whenever a snapshot has been loaded}
on persistence_changed
    call setGroupSelect
end on

{Note logic}
on note
    {First disallow all groups}
    disallow_group($ALL_GROUPS)
    {Play only the selected group}
    allow_group($groupSelect)
end on

{Group Select}
on ui_control($macro1)
    $touchedControl := 0
    {In this case call the group select function and not the macro function}
    call setGroupSelect
end on

{Amp Attack}
on ui_control($macro2)
    $touchedControl := 1
    call setMacro
end on

{Amp Decay}
on ui_control($macro3)
    $touchedControl := 2
    call setMacro
end on

{Amp Sustain}
on ui_control($macro4)
    $touchedControl := 3
    call setMacro
end on

{Amp Release}
on ui_control($macro5)
    $touchedControl := 4
    call setMacro
end on

{Filter Cut}
on ui_control($macro6)
    $touchedControl := 5
    call setMacro
end on

{Filter Res}
on ui_control($macro7)
    $touchedControl := 6
    call setMacro
end on

{Saturation Amount}
on ui_control($macro8)
    $touchedControl := 7
    call setMacro
end on
