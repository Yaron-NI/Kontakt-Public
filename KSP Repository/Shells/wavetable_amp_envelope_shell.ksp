{***********************************************
Wavetable Amp Envelope Shell
Author: Native Instruments
Written by: Yaron Eshkar
Modified: May 17, 2021
*************************************************}

on init

    declare @instrumentFramework
    declare @instrumentTitle
    declare @instrumentName
    @instrumentFramework := "Test Instrument"
    @instrumentTitle := "Instrument" {Set the instrument name}
    @instrumentName := @instrumentFramework & " " & @instrumentTitle

    declare const $mPlus := $NI_KONTAKT_IS_HEADLESS {Check if running on desktop or headless}

    declare const $frameworkType := 2
    set_script_title(@instrumentFramework) {Set the sscript title}
    message("") {Reset the messages}
    set_snapshot_type(1) {Don't init on snapshots}
    declare ui_label $labelInstrumentName(8,1) {Label for the full instrument name}
    if($mPlus=0) {Check if headless}
        set_ui_height(3)
        make_perfview {Make the performance view}
        set_ui_color(000000h)
        {Set the instrument name label parameters}
        set_text($labelInstrumentName, @instrumentName)
        set_control_par(get_ui_id($labelInstrumentName),$CONTROL_PAR_WIDTH,300)
        set_control_par(get_ui_id($labelInstrumentName),$CONTROL_PAR_TEXT_ALIGNMENT,1)
        move_control_px($labelInstrumentName,175,10)
    else {Hide the instrument name label}
        set_control_par(get_ui_id($labelInstrumentName),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)        
    end if

    
    declare $i {Variable for looping}
    declare $value {Variable for setting the scaled macro value}
    declare $touchedControl {Variable for keeping track of the last touched control}
    declare $groupSelect {Variable for keeping track of the playable group}
    declare const $numMacros := 8 {Number of NKS macros}
    declare $polyMacros {Number of Poly Macros}
    
    {8 NKS Macros}
    declare ui_slider $macro1(0,$NUM_GROUPS-1)
    declare ui_slider $macro2(0,1000)
    declare ui_slider $macro3(0,1000)
    declare ui_slider $macro4(0,1000)
    declare ui_slider $macro5(0,1000)
    declare ui_slider $macro6(0,1000)
    declare ui_slider $macro7(0,1000)
    declare ui_slider $macro8(0,1000)    

    {Labels for each macro}
    declare ui_label $label1(1,1)
    declare ui_label $label2(1,1)
    declare ui_label $label3(1,1)
    declare ui_label $label4(1,1)
    declare ui_label $label5(1,1)
    declare ui_label $label6(1,1)
    declare ui_label $label7(1,1)
    declare ui_label $label8(1,1)

    {GUI main offsets}
    declare $guiOffsetX := 125
    declare $guiOffsetY := 30
    {GUI element spacing}
    declare $guiSpacingX := 100
    declare $guiSpacingY := 20

    {Make all macros persistent}
    make_persistent($macro1)
    make_persistent($macro2)
    make_persistent($macro3)
    make_persistent($macro4)
    make_persistent($macro5)
    make_persistent($macro6)
    make_persistent($macro7)
    make_persistent($macro8)

    {Macro Arrays}
    declare !macroText[$numMacros] {Macro Texts}
    declare !valueType[$numMacros] {Value Types}
    declare %enginerPar[$numMacros] {Array for the engine parameters}
    declare %groupSlot[$numMacros] {Group slot array}  
    declare %fxSlot[$numMacros] {FX slot array} 
    declare %genericSlot[$numMacros] {Generic slot array}
    declare %macroMin[$numMacros] {Minimum scaled macro value}
    declare %macroMax[$numMacros] {Maximum scaled macro value}

    declare $unusedMacros := 0 {Let the script known which macros to hide}

    {Populate the arrays according to the framework sub-type}
    !macroText[0] := "Source"
    !macroText[1] := "Attack"
    !macroText[2] := "Decay"
    !macroText[3] := "Sustain"
    !macroText[4] := "Release"     
    !macroText[5] := "WT Pos"
    !macroText[6] := "Cutoff"
    !macroText[7] := "Res"

    !valueType[0] := ""
    !valueType[1] := " ms"
    !valueType[2] := " ms"
    !valueType[3] := " dB"
    !valueType[4] := " ms"
    !valueType[5] := " %"
    !valueType[6] := " Hz"
    !valueType[7] := " %"

    %enginerPar[0] := -1                        {Group select, so unused}
    %enginerPar[1] := $ENGINE_PAR_ATTACK        {Amp attack}
    %enginerPar[2] := $ENGINE_PAR_DECAY         {Amp decay}
    %enginerPar[3] := $ENGINE_PAR_SUSTAIN       {Amp sustain}
    %enginerPar[4] := $ENGINE_PAR_RELEASE       {Amp release}
    %enginerPar[5] := $ENGINE_PAR_WT_POSITION   {WT Position}
    %enginerPar[6] := $ENGINE_PAR_CUTOFF        {Filter cut}
    %enginerPar[7] := $ENGINE_PAR_RESONANCE     {Filter res}

    %macroMin[0] := 0
    %macroMin[1] := 0
    %macroMin[2] := 0
    %macroMin[3] := 0
    %macroMin[4] := 0
    %macroMin[5] := 0
    %macroMin[6] := 0
    %macroMin[7] := 0

    %macroMax[0] := 1000000
    %macroMax[1] := 1000000
    %macroMax[2] := 1000000
    %macroMax[3] := 1000000
    %macroMax[4] := 1000000
    %macroMax[5] := 1000000
    %macroMax[6] := 1000000
    %macroMax[7] := 1000000

    %groupSlot[0] := -1
    %groupSlot[1] := -1
    %groupSlot[2] := -1
    %groupSlot[3] := -1
    %groupSlot[4] := -1
    %groupSlot[5] := -1
    %groupSlot[6] := -1
    %groupSlot[7] := -1

    %fxSlot[0] := 0
    %fxSlot[1] := 0
    %fxSlot[2] := 0
    %fxSlot[3] := 0
    %fxSlot[4] := 0
    %fxSlot[5] := 0
    %fxSlot[6] := 0
    %fxSlot[7] := 0

    %genericSlot[0] := -1
    %genericSlot[1] := -1
    %genericSlot[2] := -1
    %genericSlot[3] := -1
    %genericSlot[4] := -1
    %genericSlot[5] := -1
    %genericSlot[6] := 1
    %genericSlot[7] := 1            

    $polyMacros := 6
    
    declare %macroID[$numMacros] {Arrays for the GUI IDs}
    declare %labelID[$numMacros]

    $i := 0
    while($i<$numMacros) {Set the control parameters}
        %macroID[$i] := get_ui_id($macro1)+$i {Put the controls in the GUI ID array}
        %labelID[$i] := get_ui_id($label1)+$i
        set_control_par(%macroID[$i],$CONTROL_PAR_AUTOMATION_ID,$i) {Set the automation IDs}
        set_control_par_str(%macroID[$i],$CONTROL_PAR_AUTOMATION_NAME,!macroText[$i])
        set_control_par(%macroID[$i],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL) {Hide all the controls}
        set_control_par(%labelID[$i],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
        if($mPlus=0) {Check if running on headless}
            if ($i<$numMacros-$unusedMacros)
                set_control_par(%macroID[$i],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING) {Hide all the controls}
                set_control_par(%labelID[$i],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
                if($i<4) {Position the first row of four controls and labels}
                    set_control_par(%macroID[$i],$CONTROL_PAR_POS_X,$guiOffsetX+($i*$guiSpacingX))
                    set_control_par(%macroID[$i],$CONTROL_PAR_POS_Y,$guiOffsetY)
                    set_control_par(%labelID[$i],$CONTROL_PAR_POS_X,$guiOffsetX+($i*$guiSpacingX))
                    set_control_par(%labelID[$i],$CONTROL_PAR_POS_Y,$guiOffsetY+$guiSpacingY)
                else {Position the second row of four controls and labels}
                    set_control_par(%macroID[$i],$CONTROL_PAR_POS_X,$guiOffsetX+(($i-4)*$guiSpacingX))
                    set_control_par(%macroID[$i],$CONTROL_PAR_POS_Y,$guiOffsetY+$guiSpacingY*2)
                    set_control_par(%labelID[$i],$CONTROL_PAR_POS_X,$guiOffsetX+(($i-4)*$guiSpacingX))
                    set_control_par(%labelID[$i],$CONTROL_PAR_POS_Y,$guiOffsetY+$guiSpacingY*3)
                end if
            end if
        end if
        inc($i)
    end while

    set_engine_par($ENGINE_PAR_EFFECT_TYPE,$EFFECT_TYPE_FILTER,-1,0,1) 
    set_engine_par($ENGINE_PAR_EFFECT_SUBTYPE,$FILTER_TYPE_SV_LP4,-1,0,1) 
    $macro2 := 110
    $macro3 := 110
    $macro4 := 1000
    $macro5 := 110
    $macro6 := 0
    $macro7 := 1000
    set_engine_par($ENGINE_PAR_EFFECT_TYPE,$EFFECT_TYPE_LIMITER,-1,7,2)  {Limiter in any case}

end on

function getScaledValue {Scale the macro value}
    $value := %macroMin[$touchedControl]+real_to_int(int_to_real(%macroMax[$touchedControl]-%macroMin[$touchedControl])*(int_to_real(get_control_par(%macroID[$touchedControl],$CONTROL_PAR_VALUE))/int_to_real(1000)))
end function

function setMacro {Set the macros}
    if ($touchedControl<$polyMacros) {Check if a touched control is on group or instrument level}
        %groupSlot[$touchedControl] := $groupSelect
    end if    
    call getScaledValue {Scale the macro value}
    {Set the engine parameter}
    set_engine_par(%enginerPar[$touchedControl],$value,%groupSlot[$touchedControl],%fxSlot[$touchedControl],%genericSlot[$touchedControl])
    {Update the internal slider label for host automation}
    set_control_par_str(%macroID[$touchedControl],$CONTROL_PAR_LABEL,get_engine_par_disp(%enginerPar[$touchedControl],%groupSlot[$touchedControl],%fxSlot[$touchedControl],%genericSlot[$touchedControl]) & !valueType[$touchedControl])
    if($mPlus=0) {Update the GUI label}
        set_control_par_str(%labelID[$touchedControl],$CONTROL_PAR_TEXT,!macroText[$touchedControl] & ": " & get_engine_par_disp(%enginerPar[$touchedControl],%groupSlot[$touchedControl],%fxSlot[$touchedControl],%genericSlot[$touchedControl]) & !valueType[$touchedControl])
    end if
end function

function setGroupSelect {Set the selected group}
    $groupSelect := $macro1
    set_control_par_str(%macroID[$touchedControl],$CONTROL_PAR_LABEL,$groupSelect+1) {Update the internal slider label for host automation}
    if($mPlus=0) {Update the GUI label}
        set_control_par_str(%labelID[$touchedControl],$CONTROL_PAR_TEXT,!macroText[0] & ": " & $groupSelect+1)
    end if
    $i := 1
    while ($i<$numMacros) {Set the macro values for the selected group}
        $touchedControl := $i
        call setMacro
        inc($i)
    end while
end function

on persistence_changed {executed after the init callback or whenever a snapshot has been loaded}
    call setGroupSelect
end on

on note {Note logic}
    disallow_group($ALL_GROUPS) {First disallow all groups}
    allow_group($groupSelect) {Play only the selected group}
end on

on ui_control($macro1) {Group Select}
    $touchedControl := 0
    call setGroupSelect {In this case call the group select function and not the macro function}
end on
on ui_control($macro2) {Amp Attack}
    $touchedControl := 1
    call setMacro
end on
on ui_control($macro3) {Amp Decay}
    $touchedControl := 2
    call setMacro
end on
on ui_control($macro4) {Amp Sustain}
    $touchedControl := 3
    call setMacro
end on
on ui_control($macro5) {Amp Release}
    $touchedControl := 4
    call setMacro
end on
on ui_control($macro6) {WT Position}
    $touchedControl := 5
    call setMacro
end on
on ui_control($macro7) {Filter Cut}
    $touchedControl := 6
    call setMacro
end on
on ui_control($macro8) {Filter Res}
    $touchedControl := 7
    call setMacro
end on
