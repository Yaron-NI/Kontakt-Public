{***********************************************
Single Sample Drop
Author: Native Instruments
Written by: Yaron Eshkar and Francesco Sabatini
Modified: September 10 2020
*************************************************}

on init

    {Info describing the script functionality}
    declare @infoText
        @infoText := "Drag and drop an audio file and manipulate the zone parameters to quickly play a sample in Kontakt."

    {Comment to hide the script in the performance view}
    {
    make_perfview
    }

    {Title of the script}
    set_script_title( "Single Sample Drop" )

    {Set the height of the UI}
    set_ui_height(6)

    {Variable for looping}
    declare $i

    {Variable for keeping track of the last touched control}
    declare $touchedControl

    {Declare a user zone}
    set_num_user_zones(1)

    {Make sure the zone covers the entire velocity range}
    set_zone_par(%NI_USER_ZONE_IDS[0],$ZONE_PAR_HIGH_VELO,128)

    {Variable for storing the path to the sample}
    declare @samplePath
        make_persistent(@samplePath)

    {Variable for returning the MIR pitch calculation}
    declare ~mirPitchResult

    {Array for all the note names}
    declare !note[12]
        !note[0] := "C"
        !note[1] := "C#"
        !note[2] := "D"
        !note[3] := "D#"
        !note[4] := "E"
        !note[5] := "F"
        !note[6] := "F#"
        !note[7] := "G"
        !note[8] := "G#"
        !note[9] := "A"
        !note[10] := "A"
        !note[11] := "B"

    {Use the note names to fill an array for all the possible notes}
    declare !noteName [128]
    $i := 0
    while ($i < 128)
        {Every 12 notes starts a new octave}
        !noteName[$i] := !note[$i mod 12] & (($i/12)-2)
        inc ($i)
    end while

    {Main Panel for all the GUI widgets}
    declare ui_panel $singleDropPanel
        {Position the main panel}
        set_control_par(get_ui_id($singleDropPanel),$CONTROL_PAR_POS_X,100)
        set_control_par(get_ui_id($singleDropPanel),$CONTROL_PAR_POS_Y,10)

    {Menu for changing between one shot and sustaining modes}
    declare ui_menu $loopMode
        add_menu_item($loopMode,"One Shot",0)
        add_menu_item($loopMode,"Sustain",1)    

    {Menu for changing between MIR and manual root note modes}
    declare ui_menu $rootMode
        add_menu_item($rootMode,"MIR",0)
        add_menu_item($rootMode,"Manual",1)    

    {Sliders for the low and high note values}
    declare ui_slider $lowValue(0,127)
    declare ui_slider $highValue(0,127)

    {Slider for the root value, only shown in manual root mode}
    declare ui_slider $rootValue(0,127)

    {Labels for presentation and displaying values}
    declare ui_label $loopModeLabel(1,1)
        set_text($loopModeLabel,"Loop Mode")
    declare ui_label $rootModeLabel(1,1)
        set_text($rootModeLabel,"Root Mode")
    declare ui_label $lowValueLabel(1,1)
    declare ui_label $highValueLabel(1,1)
    declare ui_label $rootValueLabel(1,1)
    declare ui_label $zoneInfo(1,1)

    {Switch for clearing the loaded sample from the zone}
    declare ui_button $clearSample
        set_text($clearSample,"X")

    declare ui_label $titleBar(1,1)
        set_text($titleBar,"Single Sample Drop")

    {Base text for the settings labels}
    declare !settingLabelText[3]
        !settingLabelText[0] := "Low Key: "
        !settingLabelText[1] := "High Key: "
        !settingLabelText[2] := "Root Key: " 

    {Amp envelope controls}
    declare ui_slider $ampAttack(0,1000000)
    declare ui_slider $ampDecay(0,1000000)
    declare ui_slider $ampSustain(0,1000000)
    declare ui_slider $ampRelease(0,1000000)

    {Amp envelope labels}
    declare ui_label $ampAttackLabel(1,1)
    declare ui_label $ampDecayLabel(1,1)
    declare ui_label $ampSustainLabel(1,1)
    declare ui_label $ampReleaseLabel(1,1)

    {Base text for the labels}
    declare !ampEnvelopeLabelText[4]
        !ampEnvelopeLabelText[0] := "Attack "
        !ampEnvelopeLabelText[1] := "Decay "
        !ampEnvelopeLabelText[2] := "Sustain "
        !ampEnvelopeLabelText[3] := "Release " 

    {Value types of the amp envelope control for display}
    declare !ampEnvelopeValueType[4]
        !ampEnvelopeValueType[0] := " ms"
        !ampEnvelopeValueType[1] := " ms"
        !ampEnvelopeValueType[2] := " dB"
        !ampEnvelopeValueType[3] := " ms" 

    {Array for the amp envelope engine parameters}
    declare %ampEnvelopEnginePar[4]
        %ampEnvelopEnginePar[0] := $ENGINE_PAR_ATTACK
        %ampEnvelopEnginePar[1] := $ENGINE_PAR_DECAY
        %ampEnvelopEnginePar[2] := $ENGINE_PAR_SUSTAIN
        %ampEnvelopEnginePar[3] := $ENGINE_PAR_RELEASE

    {Make all the controls persistent}
    make_persistent($loopMode)
    make_persistent($rootMode)
    make_persistent($lowValue)
    make_persistent($highValue)
    make_persistent($rootValue)
    make_persistent($ampAttack)
    make_persistent($ampDecay)
    make_persistent($ampSustain)
    make_persistent($ampRelease)

    {Gather the settings GUI IDs in an array}
    declare %settingID[13]
    $i := 0
    while($i<num_elements(%settingID))
        %settingID[$i] := get_ui_id($loopMode)+$i
        inc($i)
    end while

    $i := 0
    while($i<num_elements(%settingID))
        {Put all the settings controls in the main panel}
        set_control_par(%settingID[$i],$CONTROL_PAR_PARENT_PANEL,get_ui_id($singleDropPanel))
        if ($i<5)
            {Set a default value for the sliders}
            set_control_par(%settingID[$i],$CONTROL_PAR_DEFAULT_VALUE,60)
            {Position the controls}
            set_control_par(%settingID[$i],$CONTROL_PAR_POS_X,$i*90)
            set_control_par(%settingID[$i],$CONTROL_PAR_POS_Y,20)
        else
            if ($i<10)
                {Position the labels}
                set_control_par(%settingID[$i],$CONTROL_PAR_POS_X,($i-5)*90)
                set_control_par(%settingID[$i],$CONTROL_PAR_POS_Y,40)
            else
                if ($i<11)
                    {Size and position the zone info label}
                    set_control_par(%settingID[$i],$CONTROL_PAR_WIDTH,448)
                    set_control_par(%settingID[$i],$CONTROL_PAR_POS_X,0)
                    set_control_par(%settingID[$i],$CONTROL_PAR_POS_Y,165)
                else
                    {Align text to center only on the switch and title bar}
                    set_control_par(%settingID[$i],$CONTROL_PAR_TEXT_ALIGNMENT,1)
                    if($i<12)
                        {Position the clear samples switch}
                        set_control_par(%settingID[$i],$CONTROL_PAR_WIDTH,20)
                        set_control_par(%settingID[$i],$CONTROL_PAR_POS_X,427)
                        set_control_par(%settingID[$i],$CONTROL_PAR_POS_Y,64)
                    else
                        {Position the title bar}
                        set_control_par(%settingID[$i],$CONTROL_PAR_WIDTH,448)
                    end if
                end if
            end if
        end if
        inc($i)
    end while

    {A Panel to group the drop area and wave view together}
    declare ui_panel $waveArea
        {Put the wave area panel in the main panel}
        set_control_par(get_ui_id($waveArea),$CONTROL_PAR_PARENT_PANEL,get_ui_id($singleDropPanel))
        {Position the wave area panel}
        set_control_par(get_ui_id($waveArea),$CONTROL_PAR_POS_X,0)
        set_control_par(get_ui_id($waveArea),$CONTROL_PAR_POS_Y,65)

    {Drag and drop target}
    declare ui_mouse_area $dropArea
        {Configure the drop target to accept only single audio files}
        set_control_par( get_ui_id($dropArea), $CONTROL_PAR_DND_ACCEPT_AUDIO, $NI_DND_ACCEPT_ONE)

    {Wave view}
    declare ui_waveform $waveView(100,100)
        {Attach the zone to the view}
        attach_zone($waveView,%NI_USER_ZONE_IDS[0],0)

    {Get the UI IDs and set these controls together}
    declare %areaID[2]
        %areaID[0] := get_ui_id($dropArea)
        %areaID[1] := get_ui_id($waveView)

    $i := 0
    while ($i<num_elements(%areaID))
        {Put the wave area controls in the area panel}
        set_control_par(%areaID[$i],$CONTROL_PAR_PARENT_PANEL,get_ui_id($waveArea))
        {Size the wave area controls}
        set_control_par(%areaID[$i],$CONTROL_PAR_WIDTH,448)
        set_control_par(%areaID[$i],$CONTROL_PAR_HEIGHT,100)
        inc($i)
    end while

    {Gather the amp envelope GUI IDs in an array}
    declare %ampEnvelopeID[8]
    $i := 0
    while($i<num_elements(%ampEnvelopeID))
        %ampEnvelopeID[$i] := get_ui_id($ampAttack)+$i
        inc($i)
    end while

    $i := 0
    while($i<num_elements(%ampEnvelopeID))
        {Put all the amp envelope controls in the main panel}
        set_control_par(%ampEnvelopeID[$i],$CONTROL_PAR_PARENT_PANEL,get_ui_id($singleDropPanel))
        if($i<4)
            {Position the amp envelope sliders}
            set_control_par(%ampEnvelopeID[$i],$CONTROL_PAR_POS_X,($i*90)+45 )
            set_control_par(%ampEnvelopeID[$i],$CONTROL_PAR_POS_Y,190)
            {Set automation names for the amp envelope controls}
            set_control_par_str(%ampEnvelopeID[$i],$CONTROL_PAR_AUTOMATION_NAME,!ampEnvelopeLabelText[$i])
        else
            {Position the amp envelope labels}
            set_control_par(%ampEnvelopeID[$i],$CONTROL_PAR_POS_X,(($i-4)*90)+45)
            set_control_par(%ampEnvelopeID[$i],$CONTROL_PAR_POS_Y,210)
            {Set the amp envelope label texts}
            set_control_par_str(%ampEnvelopeID[$i],$CONTROL_PAR_TEXT,!ampEnvelopeLabelText[$i-4])
        end if
        inc($i)
    end while

    {Set the help texts for all the controls}
    set_control_help($loopMode,"Switch between one shot or looping mode.")
    set_control_help($rootMode,"Switch between MIR pitch detection or manual setting of the root note.")
    set_control_help($lowValue,"Sets the lowest playable key.")
    set_control_help($highValue,"Sets the highest playable key.")
    set_control_help($rootValue,"Set the root note when root mode is set to manual")
    set_control_help($ampAttack,"Set the amplitude evenelope attack time.")
    set_control_help($ampDecay,"Set the amplitude evenelope decay time.")
    set_control_help($ampSustain,"Set the amplitude evenelope sustain level.")
    set_control_help($ampRelease,"Set the amplitude evenelope release time.")
    set_control_help($dropArea,"Drag and drop an audio sample here.")
    set_control_help($zoneInfo,"Display the sample name.")
    set_control_help($clearSample,"Clear and remove the loaded sample.")
    {Set the title bar label with the pre-defined info text}
    set_control_help($titleBar,@infoText)

end on {end init}

{Set the zone parameters}
function setZoneParams
    {Set the zone low and high key valus}
    wait_async(set_zone_par(%NI_USER_ZONE_IDS[0],$ZONE_PAR_LOW_KEY,$lowValue))
	wait_async(set_zone_par(%NI_USER_ZONE_IDS[0],$ZONE_PAR_HIGH_KEY,$highValue))
    {Check if root should be set with MIR or manually}
	if($rootMode=0)
        {perform the MIR operation}
        wait_async(detect_pitch(%NI_USER_ZONE_IDS[0],~mirPitchResult))
        {Use the MIR result to set the root note}
        wait_async(set_zone_par(%NI_USER_ZONE_IDS[0],$ZONE_PAR_ROOT_KEY,real_to_int(round(~mirPitchResult))))
    else
        {Set the root note to the root slider value}
        wait_async(set_zone_par(%NI_USER_ZONE_IDS[0],$ZONE_PAR_ROOT_KEY,$rootValue))
    end if
    {Set to either one shot or sustaining depending on loop mode}
    set_loop_par(%NI_USER_ZONE_IDS[0],0,$LOOP_PAR_MODE,$loopMode)		
end function

{Set the Root Mode}
function setRootMode
    if($rootMode=0)
        {Hide the manual root control and label if set to MIR mode}
        set_control_par(%settingID[4],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
        set_control_par(%settingID[9],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    else
        {Show the manual root control and label if set to Manual mode}
        set_control_par(%settingID[4],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
        set_control_par(%settingID[9],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
    end if
end function

{Update the values}
function updateValues
    $i := 7
    while($i<10)
        set_control_par_str(%settingID[$i],$CONTROL_PAR_TEXT,!settingLabelText[$i-7] & get_control_par(%settingID[$i-5],$CONTROL_PAR_VALUE) & " " & !noteName[get_control_par(%settingID[$i-5],$CONTROL_PAR_VALUE)] )
        inc($i)
    end while    
end function

{Zone low key can not be higher than high key}
function setLowHigh
    if($lowValue>$highValue)
        $lowValue := $highValue
    end if
end function

{Set the zone info label}
function setZoneInfo
    {Check if the zone is empty}
    if (is_zone_empty(%NI_USER_ZONE_IDS[0])=1)
        set_control_par_str(%settingID[10],$CONTROL_PAR_TEXT,"Drop A Sample")
        set_control_par(%settingID[11],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    else
        {Display the loaded file name}
        set_control_par_str(%settingID[10],$CONTROL_PAR_TEXT,"Sample Loaded: " & get_sample(%NI_USER_ZONE_IDS[0],$NI_FILE_NAME))
        set_control_par(%settingID[11],$CONTROL_PAR_HIDE,$HIDE_PART_BG)
    end if
end function

{Set the volume envelope}
function setAmp
    {Set the engine parameter}
    set_engine_par(%ampEnvelopEnginePar[$touchedControl],get_control_par(%ampEnvelopeID[$touchedControl],$CONTROL_PAR_VALUE),0,0,-1)
    {Update the internal slider label for host automation}
    set_control_par_str(%ampEnvelopeID[$touchedControl],$CONTROL_PAR_LABEL,get_engine_par_disp(%ampEnvelopEnginePar[$touchedControl],0,0,-1))
    {Display the engine parameter on the GUI label}
    set_control_par_str(%ampEnvelopeID[$touchedControl+4],$CONTROL_PAR_TEXT,!ampEnvelopeLabelText[$touchedControl] & get_engine_par_disp(%ampEnvelopEnginePar[$touchedControl],0,0,-1) & !ampEnvelopeValueType[$touchedControl])
end function

{Clear the sample from the zone}
function setClearSample
    wait_async(set_sample(%NI_USER_ZONE_IDS[0],""))
end function

{Executed after the init callback or whenever a snapshot has been loaded}
on persistence_changed
    call setRootMode
    call updateValues
    call setZoneParams
    call setZoneInfo
    $touchedControl := 0
    while($touchedControl<4)
        call setAmp
        inc($touchedControl)
    end while
end on

{Mouse drop event}
on ui_control($dropArea)
	{Handle drop event}
	if ($NI_MOUSE_EVENT_TYPE = $NI_MOUSE_EVENT_TYPE_DROP)
        {Set the sample path variable to the dropped path}
        @samplePath := !NI_DND_ITEMS_AUDIO[0]	
        {Put the sample in the zone}
        wait_async(set_sample(%NI_USER_ZONE_IDS[0],@samplePath))
        call setZoneParams
        call setZoneInfo
	end if
end on

{Loop Mode}
on ui_control($loopMode)
    call setZoneParams
end on

{Root Mode}
on ui_control($rootMode)
    call setRootMode
    call setZoneParams
end on

{Root value}
on ui_control($rootValue)
    call updateValues
    call setZoneParams
end on

{Low key value}
on ui_control($lowValue)
    call setLowHigh
    call updateValues
    call setZoneParams
end on

{High key value}
on ui_control($highValue)
    call setLowHigh
    call updateValues
    call setZoneParams
end on

{Amp attack}
on ui_control($ampAttack)
    $touchedControl := 0
    call setAmp
end on

{Amp Decay}
on ui_control($ampDecay)
    $touchedControl := 1
    call setAmp
end on

{Amp Sustain}
on ui_control($ampSustain)
    $touchedControl := 2
    call setAmp
end on

{Amp Release}
on ui_control($ampRelease)
    $touchedControl := 3
    call setAmp
end on

{Clear Sample}
on ui_control($clearSample)
    {Only happen on a click}
    if($clearSample=1)
        call setClearSample
        call setZoneInfo
    end if
    {Return to the original switch state}
    $clearSample := 0
end on
