{***********************************************
MIDI Transpose
Multi Version
Author: Native Instruments
Written by: Yaron Eshkar, Francesco Sabatini, Mario Kruselj
Modified: June 22, 2020
*************************************************}

on init
	set_ui_height(5)
	message("")
	set_script_title("MIDI Transpose")
	
	declare $i
	declare $x

	declare ui_label $midiLabel  (4,1)
		set_text($midiLabel,"MIDI Channel Transpose")
		set_control_par (get_ui_id($midiLabel),$CONTROL_PAR_TEXT_ALIGNMENT,1)
		move_control($midiLabel,2,9)

	declare ui_label $portLabel (1,1)
		set_text($portLabel,"Port Select")
		set_control_par (get_ui_id($portLabel),$CONTROL_PAR_TEXT_ALIGNMENT,1)
		move_control($portLabel,1,2)

	declare ui_menu $portSelect
		make_persistent($portSelect)
		set_control_help ($portSelect,"Select the MIDI input port for editing")
		move_control($portSelect,1,1)
		add_menu_item ($portSelect, "Port A",0)
 		add_menu_item ($portSelect, "Port B",1)
 		add_menu_item ($portSelect, "Port C",2)
 		add_menu_item ($portSelect, "Port D",3)

	declare ui_knob $transpose1 (-60,60,1)
	declare ui_knob $transpose2 (-60,60,1)
	declare ui_knob $transpose3 (-60,60,1)
	declare ui_knob $transpose4 (-60,60,1)
	declare ui_knob $transpose5 (-60,60,1)
	declare ui_knob $transpose6 (-60,60,1)
	declare ui_knob $transpose7 (-60,60,1)
	declare ui_knob $transpose8 (-60,60,1)
	declare ui_knob $transpose9 (-60,60,1)
	declare ui_knob $transpose10 (-60,60,1)
	declare ui_knob $transpose11 (-60,60,1)
	declare ui_knob $transpose12 (-60,60,1)
	declare ui_knob $transpose13 (-60,60,1)
	declare ui_knob $transpose14 (-60,60,1)
	declare ui_knob $transpose15 (-60,60,1)
	declare ui_knob $transpose16 (-60,60,1)

	declare %transVal[64]
		make_persistent(%transVal)

	declare %transposeControls[16]

	$i := 0
	while($i < num_elements(%transposeControls))
		%transposeControls[$i] := get_ui_id($transpose1)+$i
		set_control_par(%transposeControls[$i],$CONTROL_PAR_UNIT,$KNOB_UNIT_ST)
		set_control_par(%transposeControls[$i],$CONTROL_PAR_DEFAULT_VALUE,0)
		set_control_par(%transposeControls[$i],$CONTROL_PAR_GRID_X,2 + ($i mod 4))
     	set_control_par(%transposeControls[$i],$CONTROL_PAR_GRID_Y,1 + (2 * ($i / 4)))
		set_control_par_str(%transposeControls[$i], $CONTROL_PAR_TEXT, "MIDI " & $i+1)
		set_control_par_str(%transposeControls[$i], $CONTROL_PAR_HELP, "Transpose MIDI Channel " & $i+1 & " of the selected port")
		inc($i)
	end while

	read_persistent_var(%transVal)
    read_persistent_var($portSelect)
  
	$i := $portSelect * 16
	$x := $i
	while ($i<($x+16))
		set_control_par(%transposeControls[$i-$x],$CONTROL_PAR_VALUE,%transVal[$i])
		inc($i)
	end while

end on

function notesOff
	$i := $x
	$x := $x + ($portSelect * 16)
	%transVal[$x] := get_control_par(%transposeControls[$x mod 16],$CONTROL_PAR_VALUE)
	set_midi($x,$MIDI_COMMAND_CC,120,127)
end function

on ui_control ($portSelect)
	$i := $portSelect * 16
	$x := $i
	while ($i<($x+16))
		set_control_par(%transposeControls[$i-$x],$CONTROL_PAR_VALUE,%transVal[$i])
		inc($i)
	end while
end on

on ui_control ($transpose1)
	$x := 0
	call notesOff
end on

on ui_control ($transpose2)
	$x := 1
	call notesOff
end on

on ui_control ($transpose3)
	$x := 2
	call notesOff
end on

on ui_control ($transpose4)
	$x := 3
	call notesOff
end on

on ui_control ($transpose5)
	$x := 4
	call notesOff
end on

on ui_control ($transpose6)
	$x := 5
	call notesOff
end on

on ui_control ($transpose7)
	$x := 6
	call notesOff
end on

on ui_control ($transpose8)
	$x := 7
	call notesOff
end on

on ui_control ($transpose9)
	$x := 8
	call notesOff
end on

on ui_control ($transpose10)
	$x := 9
	call notesOff
end on

on ui_control ($transpose11)
	$x := 10
	call notesOff
end on

on ui_control ($transpose12)
	$x := 11
	call notesOff
end on

on ui_control ($transpose13)
	$x := 12
	call notesOff
end on

on ui_control ($transpose14)
	$x := 13
	call notesOff
end on

on ui_control ($transpose15)
	$x := 14
	call notesOff
end on

on ui_control ($transpose16)
	$x := 15
	call notesOff
end on

on midi_in
	{NOTE ON}
	if (($MIDI_COMMAND = $MIDI_COMMAND_NOTE_ON and $MIDI_BYTE_2 > 0) or $MIDI_COMMAND = $MIDI_COMMAND_POLY_AT)
		set_event_par($EVENT_ID,$EVENT_PAR_MIDI_BYTE_1,$MIDI_BYTE_1 + %transVal[$MIDI_CHANNEL])
	end if
	{NOTE OFF}
	if ($MIDI_COMMAND = $MIDI_COMMAND_NOTE_OFF or (($MIDI_COMMAND = $MIDI_COMMAND_NOTE_ON or $MIDI_COMMAND = $MIDI_COMMAND_POLY_AT) and $MIDI_BYTE_2 = 0))
		set_event_par($EVENT_ID,$EVENT_PAR_MIDI_BYTE_1,$MIDI_BYTE_1 + %transVal[$MIDI_CHANNEL])
	end if
end on
